{"ast":null,"code":"import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, getGlobal, base64, issuedAtTime, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst APP_CHECK_STATES = new Map();\nconst DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nconst DEBUG_STATE = {\n  enabled: false\n};\nfunction getState(app) {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\nfunction setState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n}\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nconst TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nclass Refresher {\n  constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n  start() {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n  stop() {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n  isRunning() {\n    return !!this.pending;\n  }\n  async process(hasSucceeded) {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n      this.pending.resolve();\n      await this.pending.promise;\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n  getNextRun(hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ERRORS = {\n  [\"already-initialized\" /* ALREADY_INITIALIZED */]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.',\n  [\"use-before-activation\" /* USE_BEFORE_ACTIVATION */]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.',\n  [\"fetch-network-error\" /* FETCH_NETWORK_ERROR */]: 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.',\n  [\"fetch-parse-error\" /* FETCH_PARSE_ERROR */]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status-error\" /* FETCH_STATUS_ERROR */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"recaptcha-error\" /* RECAPTCHA_ERROR */]: 'ReCAPTCHA error.'\n};\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getRecaptcha() {\n  return self.grecaptcha;\n}\nfunction ensureActivated(app) {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\n      appName: app.name\n    });\n  }\n}\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n */\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0,\n      v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nasync function exchangeToken({\n  url,\n  body\n}, platformLoggerProvider) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-network-error\" /* FETCH_NETWORK_ERROR */, {\n      originalErrorMessage: originalError.message\n    });\n  }\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(\"fetch-status-error\" /* FETCH_STATUS_ERROR */, {\n      httpStatus: response.status\n    });\n  }\n  let responseBody;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\" /* FETCH_PARSE_ERROR */, {\n      originalErrorMessage: originalError.message\n    });\n  }\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\" /* FETCH_PARSE_ERROR */, {\n      originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` + `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\nfunction getExchangeRecaptchaTokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\nlet dbPromise = null;\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      request.onerror = event => {\n        var _a;\n        reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\n        originalErrorMessage: e.message\n      }));\n    }\n  });\n  return dbPromise;\n}\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\nasync function write(key, value) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n    transaction.onerror = event => {\n      var _a;\n      reject(ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\nasync function read(key) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = event.target.result;\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n    transaction.onerror = event => {\n      var _a;\n      reject(ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\nfunction computeKey(app) {\n  return `${app.options.appId}-${app.name}`;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logger = new Logger('@firebase/app-check');\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\nasync function readTokenFromStorage(app) {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n  return undefined;\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n  return Promise.resolve();\n}\nasync function readOrCreateDebugTokenFromStorage() {\n  /**\r\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n   * But it won't happen here, because this function will be called exactly once.\r\n   */\n  let existingDebugToken = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\n    // Not using logger because I don't think we ever want this accidentally hidden?\n    console.log(`App Check debug token: ${newToken}. You will need to add it to your app's App Check settings in the Firebase console for it to work`);\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isDebugMode() {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\nasync function getDebugToken() {\n  const state = getDebugState();\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\nfunction initializeDebugMode() {\n  const globals = getGlobal();\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n  const debugState = getDebugState();\n  debugState.enabled = true;\n  const deferredToken = new Deferred();\n  debugState.token = deferredToken;\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nconst defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData), /* webSafe= */false);\n}\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\nasync function getToken$2(appCheck, forceRefresh = false) {\n  const app = appCheck.app;\n  ensureActivated(app);\n  const state = getState(app);\n  /**\r\n   * First check if there is a token in memory from a previous `getToken()` call.\r\n   */\n  let token = state.token;\n  let error = undefined;\n  /**\r\n   * If there is no token in memory, try to load token from indexedDB.\r\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n      setState(app, Object.assign(Object.assign({}, state), {\n        token\n      }));\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, {\n        token: token.token\n      });\n    }\n  }\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n  /**\r\n   * DEBUG MODE\r\n   * If debug mode is set, and there is no cached token, fetch a new App\r\n   * Check token using the debug token, and return it directly.\r\n   */\n  if (isDebugMode()) {\n    const tokenFromDebugExchange = await exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.platformLoggerProvider);\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, Object.assign(Object.assign({}, state), {\n      token: tokenFromDebugExchange\n    }));\n    return {\n      token: tokenFromDebugExchange.token\n    };\n  }\n  /**\r\n   * request a new token\r\n   */\n  try {\n    // state.provider is populated in initializeAppCheck()\n    // ensureActivated() at the top of this function checks that\n    // initializeAppCheck() has been called.\n    token = await state.provider.getToken();\n  } catch (e) {\n    // `getToken()` should never throw, but logging error text to console will aid debugging.\n    logger.error(e);\n    error = e;\n  }\n  let interopTokenResult;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, Object.assign(Object.assign({}, state), {\n      token\n    }));\n    await writeTokenToStorage(app, token);\n  }\n  notifyTokenListeners(app, interopTokenResult);\n  return interopTokenResult;\n}\nfunction addTokenListener(appCheck, type, listener, onError) {\n  const {\n    app\n  } = appCheck;\n  const state = getState(app);\n  const tokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  const newState = Object.assign(Object.assign({}, state), {\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  });\n  /**\r\n   * Invoke the listener with the valid token, then start the token refresher\r\n   */\n  if (!newState.tokenRefresher) {\n    const tokenRefresher = createTokenRefresher(appCheck);\n    newState.tokenRefresher = tokenRefresher;\n  }\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  }\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve().then(() => listener({\n      token: validToken.token\n    })).catch(() => {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state.cachedTokenPromise // Storage token promise. Always populated in `activate()`.\n    .then(cachedToken => {\n      if (cachedToken && isValid(cachedToken)) {\n        listener({\n          token: cachedToken.token\n        });\n      }\n    }).catch(() => {\n      /** Ignore errors in listeners. */\n    });\n  }\n  setState(app, newState);\n}\nfunction removeTokenListener(app, listener) {\n  const state = getState(app);\n  const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n  setState(app, Object.assign(Object.assign({}, state), {\n    tokenObservers: newObservers\n  }));\n}\nfunction createTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  return new Refresher(\n  // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  async () => {\n    const state = getState(app);\n    // If there is no token, we will try to load it from storage and use it\n    // If there is a token, we force refresh it because we know it's going to expire soon\n    let result;\n    if (!state.token) {\n      result = await getToken$2(appCheck);\n    } else {\n      result = await getToken$2(appCheck, true);\n    }\n    // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n    if (result.error) {\n      throw result.error;\n    }\n  }, () => {\n    // TODO: when should we retry?\n    return true;\n  }, () => {\n    const state = getState(app);\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      let nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000;\n      // Do not allow refresh time to be past (expireTime - 5 minutes)\n      const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\nfunction notifyTokenListeners(app, token) {\n  const observers = getState(app).tokenObservers;\n  for (const observer of observers) {\n    try {\n      if (observer.type === \"EXTERNAL\" /* EXTERNAL */ && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * AppCheck Service class.\r\n */\nclass AppCheckService {\n  constructor(app, platformLoggerProvider) {\n    this.app = app;\n    this.platformLoggerProvider = platformLoggerProvider;\n  }\n  _delete() {\n    const {\n      tokenObservers\n    } = getState(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\nfunction factory(app, platformLoggerProvider) {\n  return new AppCheckService(app, platformLoggerProvider);\n}\nfunction internalFactory(appCheck) {\n  return {\n    getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\n    addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\" /* INTERNAL */, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\nconst name = \"@firebase/app-check\";\nconst version = \"0.4.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nfunction initialize(app, siteKey) {\n  const state = getState(app);\n  const initialized = new Deferred();\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: {\n      initialized\n    }\n  }));\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  const grecaptcha = getRecaptcha();\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(() => {\n      const grecaptcha = getRecaptcha();\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      grecaptcha.ready(() => {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(() => {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n  return initialized.promise;\n}\nasync function getToken$1(app) {\n  ensureActivated(app);\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState;\n    recaptcha.ready(() => {\n      resolve(\n      // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n      recaptcha.execute(reCAPTCHAState.widgetId, {\n        action: 'fire_app_check'\n      }));\n    });\n  });\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  const state = getState(app);\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: Object.assign(Object.assign({}, state.reCAPTCHAState), {\n      // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    })\n  }));\n}\nfunction loadReCAPTCHAScript(onload) {\n  const script = document.createElement('script');\n  script.src = `${RECAPTCHA_URL}`;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\nclass ReCaptchaV3Provider {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n  async getToken() {\n    if (!this._app || !this._platformLoggerProvider) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\n        appName: ''\n      });\n    }\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\" /* RECAPTCHA_ERROR */);\n    });\n\n    return exchangeToken(getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider);\n  }\n  /**\r\n   * @internal\r\n   */\n  initialize(app) {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initialize(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n/**\r\n * Custom provider class.\r\n * @public\r\n */\nclass CustomProvider {\n  constructor(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n  async getToken() {\n    if (!this._app) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\n        appName: ''\n      });\n    }\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n    return Object.assign(Object.assign({}, customToken), {\n      issuedAtTimeMillis\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n  initialize(app) {\n    this._app = app;\n  }\n  /**\r\n   * @internal\r\n   */\n  isEqual(otherProvider) {\n    if (otherProvider instanceof CustomProvider) {\n      return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\nfunction initializeAppCheck(app = getApp(), options) {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */, {\n        appName: app.name\n      });\n    }\n  }\n  const appCheck = provider.initialize({\n    options\n  });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  return appCheck;\n}\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\n  const state = getState(app);\n  const newState = Object.assign(Object.assign({}, state), {\n    activated: true\n  });\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, Object.assign(Object.assign({}, getState(app)), {\n        token: cachedToken\n      }));\n    }\n    return cachedToken;\n  });\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  setState(app, newState);\n  newState.provider.initialize(app);\n}\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  const app = appCheckInstance.app;\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, Object.assign(Object.assign({}, state), {\n    isTokenAutoRefreshEnabled\n  }));\n}\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\nasync function getToken(appCheckInstance, forceRefresh) {\n  const result = await getToken$2(appCheckInstance, forceRefresh);\n  if (result.error) {\n    throw result.error;\n  }\n  return {\n    token: result.token\n  };\n}\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  let nextFn = () => {};\n  let errorFn = () => {};\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(appCheckInstance, \"EXTERNAL\" /* EXTERNAL */, nextFn, errorFn);\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\nconst APP_CHECK_NAME = 'app-check';\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const platformLoggerProvider = container.getProvider('platform-logger');\n    return factory(app, platformLoggerProvider);\n  }, \"PUBLIC\" /* PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */)\n  /**\r\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n   * other Firebase SDKs\r\n   */.setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  }));\n  // The internal interface used by other Firebase products\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\n    const appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\" /* PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */));\n  registerVersion(name, version);\n}\nregisterAppCheck();\ninitializeDebugMode();\nexport { CustomProvider, ReCaptchaV3Provider, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };","map":{"version":3,"names":["APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","enabled","getState","app","get","setState","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","Refresher","constructor","operation","retryPolicy","getWaitDuration","lowerBound","upperBound","pending","nextErrorWaitInterval","Error","start","process","catch","stop","reject","isRunning","hasSucceeded","Deferred","sleep","getNextRun","resolve","promise","error","currentErrorWaitInterval","ms","Promise","setTimeout","ERRORS","ERROR_FACTORY","ErrorFactory","getRecaptcha","self","grecaptcha","ensureActivated","create","appName","name","uuidv4","replace","c","r","Math","random","v","toString","exchangeToken","url","body","platformLoggerProvider","headers","platformLogger","getImmediate","optional","getPlatformInfoString","options","method","JSON","stringify","response","fetch","originalError","originalErrorMessage","message","status","httpStatus","responseBody","json","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","attestationToken","expireTimeMillis","issuedAtTimeMillis","getExchangeRecaptchaTokenRequest","reCAPTCHAToken","projectId","appId","apiKey","recaptcha_token","getExchangeDebugTokenRequest","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","result","onerror","_a","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","writeTokenToIndexedDB","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","value","transaction","store","objectStore","put","compositeKey","_event","undefined","logger","Logger","readTokenFromStorage","isIndexedDBAvailable","warn","writeTokenToStorage","readOrCreateDebugTokenFromStorage","existingDebugToken","_e","newToken","console","log","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","getGlobal","FIREBASE_APPCHECK_DEBUG_TOKEN","deferredToken","defaultTokenErrorData","formatDummyToken","tokenErrorData","base64","encodeString","getToken$2","getToken","appCheck","forceRefresh","cachedToken","cachedTokenPromise","isValid","Object","assign","notifyTokenListeners","tokenFromDebugExchange","provider","interopTokenResult","makeDummyTokenResult","addTokenListener","type","listener","onError","tokenObserver","next","newState","tokenRefresher","createTokenRefresher","isTokenAutoRefreshEnabled","validToken","then","removeTokenListener","newObservers","filter","length","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","observer","AppCheckService","_delete","factory","internalFactory","RECAPTCHA_URL","initialize","siteKey","initialized","reCAPTCHAState","divId","invisibleDiv","document","createElement","id","style","display","appendChild","loadReCAPTCHAScript","ready","renderInvisibleWidget","getToken$1","recaptcha","_reject","execute","widgetId","action","container","render","sitekey","size","onload","script","src","head","ReCaptchaV3Provider","_siteKey","_app","_platformLoggerProvider","attestedClaimsToken","_getProvider","isEqual","otherProvider","CustomProvider","_customProviderOptions","customToken","issuedAtTimeSeconds","issuedAtTime","initializeAppCheck","getApp","getModularInstance","isInitialized","existingInstance","initialOptions","getOptions","_activate","automaticDataCollectionEnabled","setTokenAutoRefreshEnabled","appCheckInstance","onTokenChanged","onNextOrObserver","onCompletion","nextFn","errorFn","bind","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","_registerComponent","Component","getProvider","setInstantiationMode","setInstanceCreatedCallback","_identifier","_appcheckService","registerVersion","version"],"sources":["../src/state.ts","../src/constants.ts","../src/proactive-refresh.ts","../src/errors.ts","../src/util.ts","../src/client.ts","../src/indexeddb.ts","../src/logger.ts","../src/storage.ts","../src/debug.ts","../src/internal-api.ts","../src/factory.ts","../src/recaptcha.ts","../src/providers.ts","../src/api.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckProvider,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver\n} from './types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProvider;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1beta';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_INITIALIZED = 'already-initialized',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_INITIALIZED]:\n    'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\n    'different options. To avoid this error, call initializeAppCheck() with the ' +\n    'same options as when it was originally called. This will return the ' +\n    'already initialized instance.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\n    'Call initializeAppCheck() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.'\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_INITIALIZED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getRecaptcha(): GreCAPTCHA | undefined {\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  attestationToken: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './types';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: e.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)\n    );\n    // Not using logger because I don't think we ever want this accidentally hidden?\n    console.log(\n      `App Check debug token: ${newToken}. You will need to add it to your app's App Check settings in the Firebase console for it to work`\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  const debugState = getDebugState();\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  ListenerType\n} from './types';\nimport { AppCheckTokenListener } from './public-types';\nimport { getState, setState } from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64 } from '@firebase/util';\nimport { logger } from './logger';\nimport { AppCheckService } from './factory';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  appCheck: AppCheckService,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const state = getState(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If there is no token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n\n      setState(app, { ...state, token });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: token.token });\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    const tokenFromDebugExchange: AppCheckTokenInternal = await exchangeToken(\n      getExchangeDebugTokenRequest(app, await getDebugToken()),\n      appCheck.platformLoggerProvider\n    );\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, { ...state, token: tokenFromDebugExchange });\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    // state.provider is populated in initializeAppCheck()\n    // ensureActivated() at the top of this function checks that\n    // initializeAppCheck() has been called.\n    token = await state.provider!.getToken();\n  } catch (e) {\n    // `getToken()` should never throw, but logging error text to console will aid debugging.\n    logger.error(e);\n    error = e;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  notifyTokenListeners(app, interopTokenResult);\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  appCheck: AppCheckService,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const { app } = appCheck;\n  const state = getState(app);\n  const tokenObserver: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  const newState = {\n    ...state,\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  };\n  /**\n   * Invoke the listener with the valid token, then start the token refresher\n   */\n  if (!newState.tokenRefresher) {\n    const tokenRefresher = createTokenRefresher(appCheck);\n    newState.tokenRefresher = tokenRefresher;\n  }\n\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  }\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => listener({ token: validToken.token }))\n      .catch(() => {\n        /* we don't care about exceptions thrown in listeners */\n      });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state\n      .cachedTokenPromise! // Storage token promise. Always populated in `activate()`.\n      .then(cachedToken => {\n        if (cachedToken && isValid(cachedToken)) {\n          listener({ token: cachedToken.token });\n        }\n      })\n      .catch(() => {\n        /** Ignore errors in listeners. */\n      });\n  }\n\n  setState(app, newState);\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getState(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenObservers: newObservers\n  });\n}\n\nfunction createTokenRefresher(appCheck: AppCheckService): Refresher {\n  const { app } = appCheck;\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(appCheck);\n      } else {\n        result = await getToken(appCheck, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      // TODO: when should we retry?\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nfunction notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheck } from './public-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { FirebaseAppCheckInternal, ListenerType } from './types';\nimport {\n  getToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { getState } from './state';\n\n/**\n * AppCheck Service class.\n */\nexport class AppCheckService implements AppCheck, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    public platformLoggerProvider: Provider<'platform-logger'>\n  ) {}\n  _delete(): Promise<void> {\n    const { tokenObservers } = getState(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): AppCheckService {\n  return new AppCheckService(app, platformLoggerProvider);\n}\n\nexport function internalFactory(\n  appCheck: AppCheckService\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh => getToken(appCheck, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(appCheck, ListenerType.INTERNAL, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\n\nexport function initialize(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n\n  const grecaptcha = getRecaptcha();\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(() => {\n      const grecaptcha = getRecaptcha();\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      grecaptcha.ready(() => {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(() => {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n\n  return initialized.promise;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = `${RECAPTCHA_URL}`;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHA | undefined;\n  }\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport { issuedAtTime } from '@firebase/util';\nimport { exchangeToken, getExchangeRecaptchaTokenRequest } from './client';\nimport { AppCheckError, ERROR_FACTORY } from './errors';\nimport { CustomProviderOptions } from './public-types';\nimport {\n  getToken as getReCAPTCHAToken,\n  initialize as initializeRecaptcha\n} from './recaptcha';\nimport { AppCheckProvider, AppCheckTokenInternal } from './types';\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app || !this._platformLoggerProvider) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    });\n    return exchangeToken(\n      getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken),\n      this._platformLoggerProvider\n    );\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initializeRecaptcha(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Custom provider class.\n * @public\n */\nexport class CustomProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof CustomProvider) {\n      return (\n        this._customProviderOptions.getToken.toString() ===\n        otherProvider._customProviderOptions.getToken.toString()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheck,\n  AppCheckOptions,\n  AppCheckTokenResult,\n  Unsubscribe,\n  PartialObserver\n} from './public-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { getState, setState, AppCheckState } from './state';\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { getModularInstance, ErrorFn, NextFn } from '@firebase/util';\nimport { AppCheckService } from './factory';\nimport { AppCheckProvider, ListenerType } from './types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid\n} from './internal-api';\nimport { readTokenFromStorage } from './storage';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'app-check': AppCheckService;\n  }\n}\n\nexport { ReCaptchaV3Provider, CustomProvider } from './providers';\n\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nexport function initializeAppCheck(\n  app: FirebaseApp = getApp(),\n  options: AppCheckOptions\n): AppCheck {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions() as unknown as AppCheckOptions;\n    if (\n      initialOptions.isTokenAutoRefreshEnabled ===\n        options.isTokenAutoRefreshEnabled &&\n      initialOptions.provider.isEqual(options.provider)\n    ) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AppCheckError.ALREADY_INITIALIZED, {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({ options });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n\n  return appCheck;\n}\n\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(\n  app: FirebaseApp,\n  provider: AppCheckProvider,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n\n  const newState: AppCheckState = { ...state, activated: true };\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, { ...getState(app), token: cachedToken });\n    }\n    return cachedToken;\n  });\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  newState.provider.initialize(app);\n}\n\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nexport function setTokenAutoRefreshEnabled(\n  appCheckInstance: AppCheck,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const app = appCheckInstance.app;\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n/**\n * Get the current App Check token. Attaches to the most recent\n * in-flight request if one is present. Returns null if no token\n * is present and no token requests are in-flight.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nexport async function getToken(\n  appCheckInstance: AppCheck,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    appCheckInstance as AppCheckService,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param observer - An object with `next`, `error`, and `complete`\n * properties. `next` is called with an\n * {@link AppCheckTokenResult}\n * whenever the token changes. `error` is optional and is called if an\n * error is thrown by the listener (the `next` function). `complete`\n * is unused, as the token stream is unending.\n *\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param onNext - When the token changes, this function is called with aa\n * {@link AppCheckTokenResult}.\n * @param onError - Optional. Called if there is an error thrown by the\n * listener (the `onNext` function).\n * @param onCompletion - Currently unused, as the token stream is unending.\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    appCheckInstance as AppCheckService,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n","/**\n * Firebase App Check\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { _AppCheckComponentName } from './public-types';\nimport { factory, internalFactory } from './factory';\nimport { initializeDebugMode } from './debug';\nimport { _AppCheckInternalComponentName } from './types';\nimport { name, version } from '../package.json';\n\n// Used by other Firebase packages.\nexport { _AppCheckInternalComponentName };\n\nexport * from './api';\nexport * from './public-types';\n\nconst APP_CHECK_NAME: _AppCheckComponentName = 'app-check';\nconst APP_CHECK_NAME_INTERNAL: _AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(): void {\n  // The public interface\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return factory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n       * other Firebase SDKs\n       */\n      .setInstanceCreatedCallback(\n        (container, _identifier, _appcheckService) => {\n          container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        const appCheck = container.getProvider('app-check').getImmediate();\n        return internalFactory(appCheck);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\ninitializeDebugMode();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}